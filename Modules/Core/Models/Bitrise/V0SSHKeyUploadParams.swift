//
// V0SSHKeyUploadParams.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct V0SSHKeyUploadParams: Codable {

    /** The private part of the SSH key you would like to use */
    public let authSshPrivateKey: String
    /** The public part of the SSH key you would like to use */
    public let authSshPublicKey: String
    /** If it's set to true, the provided SSH key will be registered at the provider of the application */
    public let isRegisterKeyIntoProviderService: Bool?

    public init(authSshPrivateKey: String, authSshPublicKey: String, isRegisterKeyIntoProviderService: Bool? = nil) {
        self.authSshPrivateKey = authSshPrivateKey
        self.authSshPublicKey = authSshPublicKey
        self.isRegisterKeyIntoProviderService = isRegisterKeyIntoProviderService
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case authSshPrivateKey = "auth_ssh_private_key"
        case authSshPublicKey = "auth_ssh_public_key"
        case isRegisterKeyIntoProviderService = "is_register_key_into_provider_service"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(authSshPrivateKey, forKey: .authSshPrivateKey)
        try container.encode(authSshPublicKey, forKey: .authSshPublicKey)
        try container.encodeIfPresent(isRegisterKeyIntoProviderService, forKey: .isRegisterKeyIntoProviderService)
    }
}
