//
// V0AppFinishParams.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct V0AppFinishParams: Codable {

    /** Which config to use `default-android-config`, `default-cordova-config`, `default-fastlane-config`, `default-ionic-config`, `default-ios-config`,`default-macos-config`, `default-react-native-config`, `default-xamarin-config`, `other-config` (default if parameter is not speficied) */
    public let config: String?
    /** Environment variables for the application workflows, e.g. {\"env1\":\"val1\",\"env2\":\"val2\"} */
    public let envs: [String: String]?
    /** config specification mode, has to be specified with `manual` value */
    public let mode: String?
    /** The slug of the organization, who will be the owner of the application, if it's not specified, then the authenticated user will be the owner */
    public let organizationSlug: String?
    /** The type of your project (`android`, `ios`, `cordova`, `other`, `xamarin`, `macos`, `ionic`, `react-native`, `fastlane`, null) */
    public let projectType: String
    /** The id of the stack the application will be built (these can be found in the [system report](https://github.com/bitrise-io/bitrise.io/tree/master/system_reports) file names) */
    public let stackId: String

    public init(config: String? = nil, envs: [String: String]? = nil, mode: String? = nil, organizationSlug: String? = nil, projectType: String, stackId: String) {
        self.config = config
        self.envs = envs
        self.mode = mode
        self.organizationSlug = organizationSlug
        self.projectType = projectType
        self.stackId = stackId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case config
        case envs
        case mode
        case organizationSlug = "organization_slug"
        case projectType = "project_type"
        case stackId = "stack_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(config, forKey: .config)
        try container.encodeIfPresent(envs, forKey: .envs)
        try container.encodeIfPresent(mode, forKey: .mode)
        try container.encodeIfPresent(organizationSlug, forKey: .organizationSlug)
        try container.encode(projectType, forKey: .projectType)
        try container.encode(stackId, forKey: .stackId)
    }
}
