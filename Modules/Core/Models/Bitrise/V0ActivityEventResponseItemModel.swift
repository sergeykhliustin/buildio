//
// V0ActivityEventResponseItemModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct V0ActivityEventResponseItemModel: Codable, Identifiable, Sendable {
    public var id: String {
        return slug
    }

    public let createdAt: Date
    public let description: String?
    public let eventIcon: String?
    public let eventStype: String?
    public let repositoryAvatarIconUrl: String?
    public let repositoryTitle: String?
    public let slug: String
    public let targetPathString: String?
    public let title: String?

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(eventIcon, forKey: .eventIcon)
        try container.encodeIfPresent(eventStype, forKey: .eventStype)
        try container.encodeIfPresent(repositoryAvatarIconUrl, forKey: .repositoryAvatarIconUrl)
        try container.encodeIfPresent(repositoryTitle, forKey: .repositoryTitle)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(targetPathString, forKey: .targetPathString)
        try container.encodeIfPresent(title, forKey: .title)
    }
    
    public static func preview() -> Self {
        return V0ActivityEventResponseItemModel(createdAt: Date(), description: "description", eventIcon: "icon", eventStype: "type", repositoryAvatarIconUrl: "icon", repositoryTitle: "repoTitle", slug: "slug", targetPathString: "targetPath", title: "title")
    }

    public var appName: String? {
        return description?.components(separatedBy: " - ").first
    }

    public var isMatchingPipeline: Bool {
        return description?.contains("no matching pipeline & workflow found with trigger params") == true
    }
}
