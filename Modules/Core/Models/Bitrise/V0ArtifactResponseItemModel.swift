//
// V0ArtifactResponseItemModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct V0ArtifactResponseItemModel: Codable {

    public let artifactMeta: [Int]?
    public let artifactType: String?
    public let expiringDownloadUrl: String?
    public let fileSizeBytes: Int?
    public let isPublicPageEnabled: Bool?
    public let publicInstallPageUrl: String?
    public let slug: String?
    public let title: String?

    public init(artifactMeta: [Int]? = nil, artifactType: String? = nil, expiringDownloadUrl: String? = nil, fileSizeBytes: Int? = nil, isPublicPageEnabled: Bool? = nil, publicInstallPageUrl: String? = nil, slug: String? = nil, title: String? = nil) {
        self.artifactMeta = artifactMeta
        self.artifactType = artifactType
        self.expiringDownloadUrl = expiringDownloadUrl
        self.fileSizeBytes = fileSizeBytes
        self.isPublicPageEnabled = isPublicPageEnabled
        self.publicInstallPageUrl = publicInstallPageUrl
        self.slug = slug
        self.title = title
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case artifactMeta = "artifact_meta"
        case artifactType = "artifact_type"
        case expiringDownloadUrl = "expiring_download_url"
        case fileSizeBytes = "file_size_bytes"
        case isPublicPageEnabled = "is_public_page_enabled"
        case publicInstallPageUrl = "public_install_page_url"
        case slug
        case title
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(artifactMeta, forKey: .artifactMeta)
        try container.encodeIfPresent(artifactType, forKey: .artifactType)
        try container.encodeIfPresent(expiringDownloadUrl, forKey: .expiringDownloadUrl)
        try container.encodeIfPresent(fileSizeBytes, forKey: .fileSizeBytes)
        try container.encodeIfPresent(isPublicPageEnabled, forKey: .isPublicPageEnabled)
        try container.encodeIfPresent(publicInstallPageUrl, forKey: .publicInstallPageUrl)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(title, forKey: .title)
    }
}
