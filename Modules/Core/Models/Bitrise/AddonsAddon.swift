//
// AddonsAddon.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct AddonsAddon: Codable {

    public let bannerImage: String?
    public let cardHeaderColors: [String]?
    public let categories: [String]?
    public let description: String?
    public let developerLinks: [AddonsDeveloperLink]?
    public let documentationUrl: String?
    public let hasUi: Bool?
    public let icon: String?
    public let id: String?
    public let isBeta: Bool?
    public let plans: [AddonsPlan]?
    public let platforms: [String]?
    public let previewImages: [String]?
    public let setupGuide: AddonsSetupGuide?
    public let subtitle: String?
    public let summary: String?
    public let title: String?

    public init(bannerImage: String? = nil, cardHeaderColors: [String]? = nil, categories: [String]? = nil, description: String? = nil, developerLinks: [AddonsDeveloperLink]? = nil, documentationUrl: String? = nil, hasUi: Bool? = nil, icon: String? = nil, id: String? = nil, isBeta: Bool? = nil, plans: [AddonsPlan]? = nil, platforms: [String]? = nil, previewImages: [String]? = nil, setupGuide: AddonsSetupGuide? = nil, subtitle: String? = nil, summary: String? = nil, title: String? = nil) {
        self.bannerImage = bannerImage
        self.cardHeaderColors = cardHeaderColors
        self.categories = categories
        self.description = description
        self.developerLinks = developerLinks
        self.documentationUrl = documentationUrl
        self.hasUi = hasUi
        self.icon = icon
        self.id = id
        self.isBeta = isBeta
        self.plans = plans
        self.platforms = platforms
        self.previewImages = previewImages
        self.setupGuide = setupGuide
        self.subtitle = subtitle
        self.summary = summary
        self.title = title
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bannerImage = "banner_image"
        case cardHeaderColors = "card_header_colors"
        case categories
        case description
        case developerLinks = "developer_links"
        case documentationUrl = "documentation_url"
        case hasUi = "has_ui"
        case icon
        case id
        case isBeta = "is_beta"
        case plans
        case platforms
        case previewImages = "preview_images"
        case setupGuide = "setup_guide"
        case subtitle
        case summary
        case title
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bannerImage, forKey: .bannerImage)
        try container.encodeIfPresent(cardHeaderColors, forKey: .cardHeaderColors)
        try container.encodeIfPresent(categories, forKey: .categories)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(developerLinks, forKey: .developerLinks)
        try container.encodeIfPresent(documentationUrl, forKey: .documentationUrl)
        try container.encodeIfPresent(hasUi, forKey: .hasUi)
        try container.encodeIfPresent(icon, forKey: .icon)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(isBeta, forKey: .isBeta)
        try container.encodeIfPresent(plans, forKey: .plans)
        try container.encodeIfPresent(platforms, forKey: .platforms)
        try container.encodeIfPresent(previewImages, forKey: .previewImages)
        try container.encodeIfPresent(setupGuide, forKey: .setupGuide)
        try container.encodeIfPresent(subtitle, forKey: .subtitle)
        try container.encodeIfPresent(summary, forKey: .summary)
        try container.encodeIfPresent(title, forKey: .title)
    }
}
