//
// V0ProjectFileStorageResponseItemModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct V0ProjectFileStorageResponseItemModel: Codable {

    public let downloadUrl: String?
    public let exposedMetaDatastore: [Int]?
    public let isExpose: Bool?
    public let isProtected: Bool?
    public let processed: Bool?
    public let slug: String?
    public let uploadFileName: String?
    public let uploadFileSize: Int?
    public let uploadUrl: String?
    public let userEnvKey: String?

    public init(downloadUrl: String? = nil, exposedMetaDatastore: [Int]? = nil, isExpose: Bool? = nil, isProtected: Bool? = nil, processed: Bool? = nil, slug: String? = nil, uploadFileName: String? = nil, uploadFileSize: Int? = nil, uploadUrl: String? = nil, userEnvKey: String? = nil) {
        self.downloadUrl = downloadUrl
        self.exposedMetaDatastore = exposedMetaDatastore
        self.isExpose = isExpose
        self.isProtected = isProtected
        self.processed = processed
        self.slug = slug
        self.uploadFileName = uploadFileName
        self.uploadFileSize = uploadFileSize
        self.uploadUrl = uploadUrl
        self.userEnvKey = userEnvKey
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case downloadUrl = "download_url"
        case exposedMetaDatastore = "exposed_meta_datastore"
        case isExpose = "is_expose"
        case isProtected = "is_protected"
        case processed
        case slug
        case uploadFileName = "upload_file_name"
        case uploadFileSize = "upload_file_size"
        case uploadUrl = "upload_url"
        case userEnvKey = "user_env_key"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(downloadUrl, forKey: .downloadUrl)
        try container.encodeIfPresent(exposedMetaDatastore, forKey: .exposedMetaDatastore)
        try container.encodeIfPresent(isExpose, forKey: .isExpose)
        try container.encodeIfPresent(isProtected, forKey: .isProtected)
        try container.encodeIfPresent(processed, forKey: .processed)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(uploadFileName, forKey: .uploadFileName)
        try container.encodeIfPresent(uploadFileSize, forKey: .uploadFileSize)
        try container.encodeIfPresent(uploadUrl, forKey: .uploadUrl)
        try container.encodeIfPresent(userEnvKey, forKey: .userEnvKey)
    }
}
